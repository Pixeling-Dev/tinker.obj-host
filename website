<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>OBJ + MTL Viewer</title>
    <style>
      body { margin: 0; }
      canvas { display: block; }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.152.2/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.152.2/examples/js/loaders/MTLLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.152.2/examples/js/loaders/OBJLoader.js"></script>
  </head>
  <body>
    <script>
      const scene = new THREE.Scene();
      scene.background = new THREE.Color(0x808080); // grey background

      const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
      camera.position.set(0, 2, 5); // pull camera back

      const renderer = new THREE.WebGLRenderer({antialias: true});
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      // Controls
      const controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;

      // Lights
      const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1.2);
      hemiLight.position.set(0, 20, 0);
      scene.add(hemiLight);

      const dirLight = new THREE.DirectionalLight(0xffffff, 0.8);
      dirLight.position.set(5, 10, 7.5);
      scene.add(dirLight);

      // Helpers
      scene.add(new THREE.GridHelper(10, 10));
      scene.add(new THREE.AxesHelper(5));

      // Load MTL + OBJ
      const mtlLoader = new THREE.MTLLoader();
      mtlLoader.load(
        "https://raw.githubusercontent.com/Pixeling-Dev/tinker.obj-host/refs/heads/main/obj.mtl",
        (materials) => {
          materials.preload();

          const objLoader = new THREE.OBJLoader();
          objLoader.setMaterials(materials);

          objLoader.load(
            "https://raw.githubusercontent.com/Pixeling-Dev/tinker.obj-host/refs/heads/main/tinker.obj",
            (object) => {
              object.position.set(0, 0, 0);
              object.scale.set(0.1, 0.1, 0.1); // shrink if needed
              scene.add(object);
              console.log("OBJ loaded:", object);
            },
            (xhr) => {
              console.log((xhr.loaded / xhr.total * 100) + '% loaded');
            },
            (error) => {
              console.error("Error loading OBJ:", error);
            }
          );
        }
      );

      // Animate
      function animate() {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
      }
      animate();

      window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      });
    </script>
  </body>
</html>
